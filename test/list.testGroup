#!/usr/bin/env rexx

parse source . . s

group = .TestGroup~new(s)
group~add(.list.testGroup)

if group~isAutomatedTest then return group

testResult = group~suite~execute~~print

return testResult

::requires 'ooTest.frm'
::requires 'orxpython.cls'

/*
    See:
    https://docs.python.org/3/library/stdtypes.html#list
    https://docs.python.org/3/tutorial/introduction.html#lists
*/
::class list.testGroup public subclass ooTestCase
    ::method test_newEmptyList_usingBrackets
        list = .Python~list
        actual = .Python~len(list)
        self~assertSame(0, unbox(actual))

    ::method test_newEmptyList_usingConstructor
        list = .Python~list
        actual = .Python~len(list)
        self~assertSame(0, unbox(actual))

    ::method test_newNonEmptyList_usingBrackets
        list = .Python~py.listOf('a', 'b', 'c')
        actual = .Python~len(list)
        self~assertSame(3, unbox(actual))

    ::method test_newNonEmptyList_usingConstructor
        stop = .Python~int(3)
        iterable = .Python~range(stop)
        list = .Python~list(iterable)

        actual = .Python~len(list)

        self~assertSame(3, unbox(actual))

    ::method test_indexing_get
        list = .Python~py.listOf('a', 'b', 'c')
        index = .Python~int(1)

        actual = list[index]

        self~assertSame('b', unbox(actual))

    ::method test_indexing_set
        list = .Python~py.listOf('a', 'b', 'c')
        index = .Python~int(1)

        list[index] = 'bravo'

        self~assertSame('bravo', unbox(list[index]))

    ::method test_append
        list = .Python~list
        list~append('a')
        list~append('b')
        list~append('c')

        actual = .Python~len(list)

        self~assertSame(3, unbox(actual))

    ::method test_append_differentTypes
        list = .Python~list
        list~append('a')
        list~append(.Python~str('a'))
        list~append(.Python~int(1))
        list~append(.Python~float(1.0))
        list~append(.Python~True)
        list~append(.Python~None)
        list~append(.Python~py.listOf('a', 'b', 'c'))

        actual = .Python~len(list)

        self~assertSame(7, unbox(actual))

    ::method test_iteration
        list = .Python~py.listOf('a', 'b', 'c')

        concat = ''

        do i=0 to 2
            index = .Python~int(i)
            concat ||= unbox(list[index])
        end

        self~assertSame('abc', concat)
