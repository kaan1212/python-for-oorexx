#!/usr/bin/env rexx

parse source . . s

group = .TestGroup~new(s)
group~add(.python.cls.testGroup)

if group~isAutomatedTest then return group

testResult = group~suite~execute~~print

return testResult

::requires 'ooTest.frm'
::requires 'orxpython.cls'

/*
    The test runner raises an exception if there is not at least one multi-line comment present anywhere in this file.
*/
::class python.cls.testGroup public subclass ooTestCase
    ::method test_unbox_pythonObject_returns_ooRexxObject
        self~assertNil(unbox(.Python~None))
        self~assertTrue(unbox(.Python~True))
        self~assertFalse(unbox(.Python~False))
        self~assertSame(12, unbox(.Python~int(12)))
        self~assertSame(3.14, unbox(.Python~float(3.14)))
        self~assertSame('hello, world', unbox(.Python~str('hello, world')))

    ::method test_unbox_pythonObject_returns_pythonObject
        self~assertTrue(unbox(.Python~complex('+1.23'))~isInstanceOf(.PythonObject))
        self~assertTrue(unbox(.Python~list)~isInstanceOf(.PythonObject))
        self~assertTrue(unbox(.Python~tuple)~isInstanceOf(.PythonObject))
        self~assertTrue(unbox(.Python~set)~isInstanceOf(.PythonObject))
        self~assertTrue(unbox(.Python~dict)~isInstanceOf(.PythonObject))

    ::method test_unbox_ooRexxObject_returns_ooRexxObject
        self~assertNil(unbox(.nil))
        self~assertTrue(unbox(.true))
        self~assertFalse(unbox(.false))
        self~assertSame(12, unbox(12))
        self~assertSame(3.14, unbox(3.14))
        self~assertSame('hello, world', unbox('hello, world'))

        self~assertEquals(.Array~new, unbox(.Array~new))
        self~assertEquals(.Array~of(1, 2, 3), unbox(.Array~of(1, 2, 3)))

    ::method test_objectName
        actual = .Python~str('hello, world')~objectName

        re = .RegularExpression~new('str@[:xdigit:]{8}_[:xdigit:]{8}')
        self~assertTrue(re~match(actual))

    ::method test_escape_linefeed
        actual = .Python~escape('hello, world\n')
        self~assertSame('hello, world' || '0a'x, actual)

    ::method test_escape_linefeed_complex
        actual = .Python~escape('\hello, world\\n')
        self~assertSame('\hello, world\' || '0a'x, actual)

    ::method test_escape_linefeed_multiple
        string = 'first line\n'
        string ||= 'second line\n'
        string ||= 'third line\n'

        actual = .Python~escape(string)

        nl = .String~nl -- '0a'x
        result = 'first line'nl
        result ||= 'second line'nl
        result ||= 'third line'nl

        self~assertSame(result, actual)

    ::method test_escape_horizontalTab
        actual = .Python~escape('column\tcolumn')
        self~assertSame('column' || .String~tab || 'column', actual)
