#!/usr/bin/env rexx

parse source . . s

group = .TestGroup~new(s)
group~add(.slice.testGroup)

if group~isAutomatedTest then return group

testResult = group~suite~execute~~print

return testResult

::requires 'ooTest.frm'
::requires 'orxpython.cls'

/*
    See: https://docs.python.org/3/library/functions.html#slice

    Python syntax examples:
        sequence[start:stop:step]

        sequence[start:]
        sequence[start:stop]
        sequence[start::step]

        sequence[:stop]
        sequence[:stop:step]

        sequence[::step]
*/
::class slice.testGroup public subclass ooTestCase
    ::method test_string
        string = .Python~str('hello, world')
        start = .Python~int(0)
        stop = .Python~int(5)

        actual = string[start, stop]

        self~assertSame('hello', unbox(actual))

    ::method test_list
        list = .Python~py.listOf('h', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd')
        start = .Python~int(0)
        stop = .Python~int(5)

        actual = list[start, stop]

        self~assertSame("['h', 'e', 'l', 'l', 'o']", actual~py.fromPythonString)

    ::method test_omitStartIndex
        string = .Python~str('hello, world')
        stop = .Python~int(5)

        actual = string[, stop]

        self~assertSame('hello', unbox(actual))

    ::method test_omitStopIndex
        string = .Python~str('hello, world')
        start = .Python~int(7)

        actual = string[start, .Python~None]

        self~assertSame('world', unbox(actual))

    ::method test_omitStartAndStopIndices
        string = .Python~str('hello, world')

        actual = string[, .Python~None]

        self~assertSame('hello, world', unbox(actual))

    ::method test_step
        string = .Python~str('hello, world')
        step = .Python~int(2)

        actual = string[, , step]

        self~assertSame('hlo ol', unbox(actual))
