#!/usr/bin/env rexx

parse source . . s

group = .TestGroup~new(s)
group~add(.json.testGroup)

if group~isAutomatedTest then return group

testResult = group~suite~execute~~print

return testResult

::requires 'ooTest.frm'
::requires 'orxpython.cls'

/*
    See: https://docs.python.org/3/library/json.html
*/
::class json.testGroup public subclass ooTestCase
    ::method test_dumps
        /*
            Python example:
            >>> import json
            >>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])
            '["foo", {"bar": ["baz", null, 1.0, 2]}]'
        */

        .Python~import('json')

        objChild = .Python~dict
        objChild['bar'] = .Python~tuple(.Python~py.listOf('baz', .Python~None, .Python~float(1.0), .Python~int(2)))
        obj = .Python~py.listOf('foo', objChild)
        actual = .Python~json.dumps(obj)

        self~assertSame('["foo", {"bar": ["baz", null, 1.0, 2]}]', actual~py.fromPythonString)

    ::method test_dumps_sortKeys
        /*
            Python example:
            >>> import json
            >>> print(json.dumps({"c": 0, "b": 0, "a": 0}, sort_keys=True))
            {"a": 0, "b": 0, "c": 0}
        */

        .Python~import('json')

        dict = .Python~dict
        dict['c'] = .Python~int(0)
        dict['b'] = .Python~int(0)
        dict['a'] = .Python~int(0)

        kwargs = .Python~kwargs
        kwargs['sort_keys'] = .Python~True
        actual = .Python~json.dumps(dict, kwargs)

        self~assertSame('{"a": 0, "b": 0, "c": 0}', actual~py.fromPythonString)

    ::method test_dumps_compactEncoding
        /*
            Python example:
            >>> import json
            >>> json.dumps([1, 2, 3, {'4': 5, '6': 7}], separators=(',', ':'))
            '[1,2,3,{"4":5,"6":7}]'
        */

        .Python~import('json')

        dict = .Python~dict
        dict['4'] = .Python~int(5)
        dict['6'] = .Python~int(7)
        obj = .Python~py.listOf(.Python~int(1), .Python~int(2), .Python~int(3), dict)

        kwargs = .Python~kwargs
        kwargs['separators'] = .Python~tuple(.Python~py.listOf(',', ':'))
        actual = .Python~json.dumps(obj, kwargs)

        self~assertSame('[1,2,3,{"4":5,"6":7}]', actual~py.fromPythonString)

    ::method test_dumps_prettyPrinting
        /*
            Python example:
            >>> import json
            >>> print(json.dumps({'6': 7, '4': 5}, sort_keys=True, indent=4))
            {
                "4": 5,
                "6": 7
            }
        */

        .Python~import('json')

        dict = .Python~dict
        dict['6'] = .Python~int(7)
        dict['4'] = .Python~int(5)

        kwargs = .Python~kwargs
        kwargs['sort_keys'] = .Python~True
        kwargs['indent'] = .Python~int(4)
        actual = .Python~json.dumps(dict, kwargs)

        nl = .String~nl
        expected = -
            '{'nl || -
            '    "4": 5,'nl || -
            '    "6": 7'nl || -
            '}'

        self~assertSame(expected, actual~py.fromPythonString)

    ::method test_loads
        /*
            Python example:
            >>> import json
            >>> json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]')
            ['foo', {'bar': ['baz', None, 1.0, 2]}]
        */

        .Python~import('json')
        actual = .Python~json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]')

        expectedObjChild = .Python~dict
        expectedObjChild['bar'] = .Python~py.listOf('baz', .Python~None, .Python~float(1.0), .Python~int(2))
        expectedObj = .Python~py.listOf('foo', expectedObjChild)

        self~assertSame(expectedObj~py.fromPythonString, actual~py.fromPythonString)
