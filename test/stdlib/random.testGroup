#!/usr/bin/env rexx

parse source . . s

group = .TestGroup~new(s)
group~add(.random.testGroup)

if group~isAutomatedTest then return group

testResult = group~suite~execute~~print

return testResult

::requires 'ooTest.frm'
::requires 'orxpython.cls'

/*
    random â€” Generate pseudo-random numbers

    See:
    - https://docs.python.org/3/library/random.html

    Examples:
    - https://docs.python.org/3/library/random.html#examples
*/
::class random.testGroup public subclass ooTestCase
    ::method test_random
        .Python~from('random')~import('random', 'seed')

        .Python~seed(.Python~int(0))
        actual = .Python~random()

        self~assertSame(0.8444218515250481, unbox(actual))

    ::method test_randrange
        .Python~from('random')~import('randrange', 'seed')

        .Python~seed(.Python~int(0))
        actual = .Python~randrange(.Python~int(10))

        self~assertSame(6, unbox(actual))

    ::method test_choice
        .Python~from('random')~import('choice', 'seed')

        .Python~seed(.Python~int(0))
        actual = .Python~choice(.Python~py.listOf('win', 'lose', 'draw'))

        self~assertSame('lose', unbox(actual))

    ::method test_shuffle
        .Python~from('random')~import('shuffle', 'seed')

        .Python~seed(.Python~int(0))
        deck = .Python~str('ace two three four')~split()
        .Python~shuffle(deck)

        self~assertSame("['three', 'ace', 'two', 'four']", deck~py.fromPythonString)
