#!/usr/bin/env rexx

parse source . . s

group = .TestGroup~new(s)
group~add(.str.testGroup)

if group~isAutomatedTest then return group

testResult = group~suite~execute~~print

return testResult

::requires 'ooTest.frm'
::requires 'python.cls'

/*
    See:
    https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str
    https://docs.python.org/3/tutorial/introduction.html#text
*/
::class str.testGroup public subclass ooTestCase
    ::method setUp
        expose py
        py = .Python~new

    ::method test_newEmptyString_usingLiteral
        expose py
        string = ''
        actual = py~len(string)
        self~assertSame(0, actual)

    ::method test_newEmptyString_usingConstructor
        expose py
        string = py~str
        actual = py~len(string)
        self~assertSame(0, actual)

    ::method test_newNonEmptyString_usingLiteral
        expose py
        string = 'hello, world'
        actual = py~len(string)
        self~assertSame(12, actual)

    ::method test_newNonEmptyString_usingConstructor
        expose py
        string = py~str('hello, world')
        actual = py~len(string)
        self~assertSame(12, actual)

    ::method test_indexing
        expose py
        string = py~str('hello, world')
        index = py~int(0)

        actual = string[index]

        self~assertSame('h', actual)

    ::method test_trueString_isNotRexxTrue
        expose py
        actual = py~str('True')
        self~assertNotSame(.true, actual)

    ::method test_falseString_isNotRexxFalse
        expose py
        actual = py~str('False')
        self~assertNotSame(.false, actual)

    ::method test_noneString_isNotRexxNil
        expose py
        actual = py~str('None')
        self~assertNotNil(actual)
