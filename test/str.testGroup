#!/usr/bin/env rexx

parse source . . s

group = .TestGroup~new(s)
group~add(.str.testGroup)

if group~isAutomatedTest then return group

testResult = group~suite~execute~~print

return testResult

::requires 'ooTest.frm'
::requires 'orxpython.cls'

/*
    See:
    https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str
    https://docs.python.org/3/tutorial/introduction.html#text
*/
::class str.testGroup public subclass ooTestCase
    ::method test_newEmptyString_usingLiteral
        string = ''
        actual = .Python~len(string)
        self~assertSame(0, unbox(actual))

    ::method test_newEmptyString_usingConstructor
        string = .Python~str
        actual = .Python~len(string)
        self~assertSame(0, unbox(actual))

    ::method test_newNonEmptyString_usingLiteral
        string = 'hello, world'
        actual = .Python~len(string)
        self~assertSame(12, unbox(actual))

    ::method test_newNonEmptyString_usingConstructor
        string = .Python~str('hello, world')
        actual = .Python~len(string)
        self~assertSame(12, unbox(actual))

    ::method test_indexing
        string = .Python~str('hello, world')
        index = .Python~int(0)

        actual = string[index]

        self~assertSame('h', unbox(actual))

    ::method test_trueString_isNotRexxTrue
        actual = .Python~str('True')
        self~assertNotSame(.true, unbox(actual))

    ::method test_falseString_isNotRexxFalse
        actual = .Python~str('False')
        self~assertNotSame(.false, unbox(actual))

    ::method test_noneString_isNotRexxNil
        actual = .Python~str('None')
        self~assertNotNil(unbox(actual))
